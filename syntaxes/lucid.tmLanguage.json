{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Lucid",
  "scopeName": "source.lucid",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#keyword-control"
    },
    {
      "include": "#built-ins"
    },
    {
      "include": "#declarations"
    },
    {
      "include": "#function-call"
    },
    {
      "include": "#control-structs"
    },
    {
      "include": "#expressions"
    },
    {
      "include": "#literals"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "include": "#block-comment"
        },
        {
          "include": "#inline-comment"
        }
      ]
    },
    "block-comment": {
      "patterns": [
        {
          "name": "comment.block.lucid",
          "begin": "(/\\*)",
          "end": "(\\*/)"
        }
      ]
    },
    "inline-comment": {
      "patterns": [
        {
          "name": "comment.line.double-slash.lucid",
          "begin": "(//)",
          "end": "(?=$)"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.lucid",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.lucid",
          "match": "\\\\."
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "include": "#functions"
        },
        {
          "include": "#events"
        },
        {
          "include": "#handlers"
        },
        {
          "include": "#types"
        },
        {
          "include": "#modules"
        },
        {
          "include": "#imports"
        },
        {
          "include": "#variable-declare"
        }
      ]
    },
    "variable-declare": {
      "patterns": [
        {
          "match": "\\b(?:(const|global|extern|symbolic|size|auto)\\s+)*?((?:[a-zA-Z0-9_]+)(?:\\.[a-zA-Z0-9_]+)?(?:<<[a-zA-Z0-9_,' ]+>>)?(?:\\[[a-zA-Z0-9_']+\\])?\\s+?)?([a-zA-Z0-9_]+)\\s*?(?=\\=|;)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "name": "storage.modifier.variable.lucid",
                  "match": "\\b(const|global|extern|symbolic|size)\\b"
                },
                {
                  "name": "keyword.auto.lucid",
                  "match": "\\b(auto)\\b"
                }
              ]
            },
            "2": {
              "patterns": [
                {
                  "include": "#type-attr"
                }
              ]
            },
            "3": {
              "name": "variable.local"
            }
          }
        }
      ]
    },
    "type-parametric": {
      "patterns": [
        {
          "name": "constant.numeric.lucid",
          "match": "(?<=,|<<)\\s*?([0-9]+)\\s*?(?=,|>>)"
        },
        {
          "name": "constant.language.size.lucid support.constant.size.lucid constant.other.size.lucid",
          "match": "(?<=,|<<)\\s*?'([a-zA-Z0-9_]+)\\s*?(?=,|>>)"
        },
        {
          "name": "variable.other.size.lucid",
          "match": "(?<=,|<<)\\s*?([a-zA-Z0-9_]+)\\s*?(?=,|>>)"
        }
      ]
    },
    "type-parametric-list": {
      "patterns": [
        {
          "name": "constant.numeric.lucid",
          "match": "(?:[0-9]+)"
        },
        {
          "name": "constant.language.size.lucid support.constant.size.lucid constant.other.size.lucid",
          "match": "(?:'(?:[a-zA-Z0-9_]+))"
        },
        {
          "name": "variable.other.size.lucid",
          "match": "(?:[a-zA-Z0-9_]+)"
        }
      ]
    },
    "type-attr": {
      "patterns": [
        {
          "name": "meta.type.lucid",
          "match": "([a-zA-Z0-9_]+(?:\\.[a-zA-Z0-9_]+)?)(<<[a-zA-Z0-9_' ,]+>>)?(?:\\[([a-zA-Z0-9_']+)\\])?",
          "captures": {
            "1": {
              "name": "entity.name.type.lucid"
            },
            "2": {
              "name": "meta.type.lucid",
              "patterns": [
                {
                  "include": "#type-parametric"
                }
              ]
            },
            "3": {
              "name": "meta.type.lucid",
              "patterns": [
                {
                  "include": "#type-parametric-list"
                }
              ]
            }
          }
        }
      ]
    },
    "events": {
      "patterns": [
        {
          "name": "meta.function.lucid",
          "begin": "^\\s*?(?:(entry|exit|entry\\s+?control)\\s+?)?(event)\\s+?([a-zA-Z0-9_]+)\\s*?",
          "end": "(?:;)|(?:\\{)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.event.lucid"
            },
            "2": {
              "name": "keyword.function.lucid"
            },
            "3": {
              "name": "entity.name.type.lucid"
            }
          },
          "patterns": [
            {
              "include": "#function-parameters"
            },
            {
              "include": "#global-access-order"
            }
          ]
        }
      ]
    },
    "handlers": {
      "patterns": [
        {
          "name": "meta.function.lucid",
          "begin": "^\\s*?(handle|memop)\\s+?([a-zA-Z0-9_]+)\\s*?",
          "end": "(?:;)|(?:\\{)",
          "beginCaptures": {
            "1": {
              "name": "keyword.function.lucid"
            },
            "2": {
              "name": "entity.name.function.lucid"
            }
          },
          "patterns": [
            {
              "include": "#function-parameters"
            },
            {
              "include": "#global-access-order"
            }
          ]
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "meta.type.lucid",
          "begin": "^\\s*?(global)?\\s+?(type)\\s+?((?:[a-zA-Z0-9_]+)(?:<<[a-zA-Z0-9_,' ]+>>)?(?:\\[[a-zA-Z0-9_']+\\])?)",
          "end": "(?:;)|(?:\\{)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.type.lucid"
            },
            "2": {
              "name": "keyword.typedef.lucid"
            },
            "3": {
              "patterns": [
                {
                  "name": "meta.type.lucid",
                  "match": "([a-zA-Z0-9_]+?)(<<[a-zA-Z0-9_' ,]+>>)?",
                  "captures": {
                    "1": {
                      "name": "entity.name.type.lucid"
                    },
                    "2": {
                      "name": "meta.type.lucid",
                      "patterns": [
                        {
                          "name": "constant.language.size.lucid support.constant.size.lucid constant.other.size.lucid",
                          "match": "(?<=,|<<)\\s*?'([a-zA-Z0-9_]+)\\s*?(?=,|>>)"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.lucid",
          "begin": "^\\s*?(fun|constr)\\s+?((?:[a-zA-Z0-9_]+)(?:<<[a-zA-Z0-9_,' ]+>>)?(?:\\[[a-zA-Z0-9_']+\\])?)\\s+?([a-zA-Z0-9_]+)\\s*?",
          "end": "(?:;)|(?:\\{)",
          "beginCaptures": {
            "1": {
              "name": "keyword.function.lucid"
            },
            "2": {
              "patterns": [
                {
                  "include": "#type-attr"
                }
              ]
            },
            "3": {
              "name": "entity.name.function.lucid"
            }
          },
          "patterns": [
            {
              "include": "#function-parameters"
            },
            {
              "include": "#global-access-order"
            }
          ]
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "match": "\\s*?((?:[a-zA-Z0-9_]+)(?:<<[a-zA-Z0-9_,' ]+>>)?(?:\\[[a-zA-Z0-9_']+\\])?)\\s+?([a-zA-Z0-9_]+)\\s*?",
              "captures": {
                "1": {
                  "name": "storage.type.lucid",
                  "patterns": [
                    {
                      "include": "#type-attr"
                    }
                  ]
                },
                "2": {
                  "name": "variable.parameter.lucid"
                }
              }
            }
          ]
        }
      ]
    },
    "global-access-order": {
      "patterns": [
        {
          "begin": "(?<=\\)\\s*?\\[)",
          "end": "(?:\\])",
          "patterns": [
            {
              "name": "keyword.operator.comparison.lucid",
              "match": "\\b(<|>|<=|>=)\\b"
            },
            {
              "name": "constant.language.globalaccess.lucid",
              "match": "\\b(start|end)\\b"
            },
            {
              "name": "variable.other.global.lucid",
              "match": "\\b[a-zA-Z0-9_]+\\b"
            }
          ]
        }
      ]
    },
    "modules": {
      "patterns": [
        {
          "name": "meta.class.lucid",
          "match": "^(module)\\s+?([a-zA-Z0-9_]+?)\\s+?\\:\\s+?{\\s*?$",
          "captures": {
            "1": {
              "name": "storage.type.lucid"
            },
            "2": {
              "name": "entity.name.type.lucid"
            }
          }
        }
      ]
    },
    "module-header": {
      "patterns": [
        {
          "include": "#keyword-control"
        }
      ]
    },
    "module-body": {
      "patterns": [
        {
          "include": "#keyword-control"
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "name": "meta.import.lucid",
          "match": "(include)\\s(\\\"[a-zA-Z0-9_\\.\\/]*?\\\")",
          "captures": {
            "1": {
              "name": "keyword.control.import.lucid"
            },
            "2": {
              "name": "string.quoted.double.lucid",
              "patterns": [
                {
                  "name": "string.quoted.double.lucid",
                  "match": "\\\"[a-zA-Z0-9_\\./]*?([a-zA-Z0-9_\\.]+?)\\.dpt\\\"",
                  "captures": {
                    "1": {
                      "name": "entity.name.namespace.lucid"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "function-call": {
      "patterns": [
        {
          "begin": "\\b(?:([a-zA-Z0-9_]+)\\.)?([a-zA-Z0-9_]+)\\s*?\\(",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.lucid"
            },
            "2": {
              "name": "entity.name.function.lucid"
            }
          },
          "patterns": [
            {
              "name": "string.quoted.double.lucid",
              "begin": "\"",
              "end": "\"",
              "patterns": [
                {
                  "name": "constant.character.escape.lucid",
                  "match": "\\\\."
                }
              ]
            },
            {
              "include": "#function-call"
            },
            {
              "match": "([a-zA-Z0-9_]+)",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "name": "constant.numeric.lucid",
                      "match": "(\\b[0-9\\-]+\\b)"
                    },
                    {
                      "name": "variable.local.lucid",
                      "match": "(\\b[a-zA-Z0-9_]+\\b)"
                    }
                  ]
                }
              }
            },
            {
              "match": "([a-zA-Z0-9_]+)#([a-zA-Z0-9_]+)(?:\\[([a-zA-Z0-9_])\\])?",
              "captures": {
                "1": {
                  "name": "variable.local.lucid"
                },
                "2": {
                  "name": "variable.local.lucid"
                },
                "3": {
                  "patterns": [
                    {
                      "name": "constant.numeric.lucid",
                      "match": "(\\b[0-9\\-]+\\b)"
                    },
                    {
                      "name": "variable.local.lucid",
                      "match": "(\\b[a-zA-Z0-9_]+\\b)"
                    }
                  ]
                }
              }
            }
          ]
        }
      ]
    },
    "keyword-control": {
      "patterns": [
        {
          "name": "keyword.control.lucid",
          "match": "\\b(if|while|for|return|generate|constr|auto|else|match|with)\\b"
        }
      ]
    },
    "literals": [
      {
        "include": "#numeric-literals"
      }
    ],
    "numeric-literals": {
      "patterns": [
        {
          "name": "constant.numeric.lucid",
          "match": "\\b[0-9]+?"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.lucid",
          "match": "\\b(\\+|\\-|\\|\\+\\||\\|-\\||&|~|^^|>>>|<<<|^)\\b"
        },
        {
          "name": "keyword.operator.boolean.lucid",
          "match": "\\b(==|!=|&&|\\|\\||!)\\b"
        },
        {
          "name": "keyword.operator.comparison.lucid",
          "match": "\\b(<|>|<=|>=)\\b"
        }
      ]
    },
    "built-ins": {
      "patterns": [
        {
          "name": "variable.language.lucid",
          "match": "\\b(self|this|recirculation_port|ingress_port|true|false)\\b"
        }
      ]
    },
    "variable-access": [
      {
        "name": "string.quoted.double.lucid",
        "begin": "\"",
        "end": "\"",
        "patterns": [
          {
            "name": "constant.character.escape.lucid",
            "match": "\\\\."
          }
        ]
      },
      {
        "include": "#function-call"
      },
      {
        "match": "([a-zA-Z0-9_]+)",
        "captures": {
          "1": {
            "patterns": [
              {
                "name": "constant.numeric.lucid",
                "match": "(\\b[0-9\\-]+\\b)"
              },
              {
                "name": "variable.local.lucid",
                "match": "(\\b[a-zA-Z0-9_]+\\b)"
              }
            ]
          }
        }
      },
      {
        "match": "([a-zA-Z0-9_]+)#([a-zA-Z0-9_]+)(?:\\[([a-zA-Z0-9_])\\])?",
        "captures": {
          "1": {
            "name": "variable.local.lucid"
          },
          "2": {
            "name": "variable.local.lucid"
          },
          "3": {
            "patterns": [
              {
                "name": "constant.numeric.lucid",
                "match": "(\\b[0-9\\-]+\\b)"
              },
              {
                "name": "variable.local.lucid",
                "match": "(\\b[a-zA-Z0-9_]+\\b)"
              }
            ]
          }
        }
      }
    ],
    "expressions": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#literals"
        },
        {
          "include": "#function-call"
        },
        {
          "include": "#variable-access"
        }
      ]
    }
  }
}